Part 1:
    For part 1, we were tasked with finding the highest possible seat number,
        created by multiplying the row number by 8 and adding the column number.

    However, all we were given were a string of characters that indicated a front or back half.

    The puzzle statement explains it better, and I don't want to go too far into depth here...

    My first thought was to actually hard code in the divisions, until I realized that that would mean
        that I would have to write hundreds of lines of code and realized that there had to
        be another, better way.

    So I went back and figured out that I could simply assign each ticket code two arrays,
        one that indicated the row, and one that indicated the column.

    Iterating though and dividing and shifting numbers inwards, I would eventually come upon the final
        numbers for the rows and the columns.

    I pushed the final seat numbers into a separate array and returned the max.

    Using this method, I found that the max was 890, which was the correct answer.

Part 2:
    For part 2, we were tasked with finding our seat number, which was much easier to do.
    The key would be: our seat would be the missing number from our list.

    Knowing this, I simply sorted the list of seat numbers and iterated through, checking if each number
        was equal to the next number minus 1.

    When turning point would be when they were not equal, at which point I would return the first number
        plus 1.

    Using this method, I found out that my seat number was 651, which was the correct answer.